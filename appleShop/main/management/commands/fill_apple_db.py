import os
import random
from datetime import timedelta
from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from django.utils import timezone
from django.db import connection, transaction
from django.db.models.deletion import ProtectedError
from main.models import (
    UserProfile, Category, Article, ArticleCategory,
    Product, Discount, Basket, BasketItem, Order, OrderItem, MainPage
)

class Command(BaseCommand):
    help = '–ó–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∏ Apple'

    def handle(self, *args, **kwargs):
        self.stdout.write("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Apple Store...")
        
        with transaction.atomic():
            self.clear_test_data()
            users = self.create_users()
            categories = self.create_categories()
            articles = self.create_articles(categories)
            products = self.create_products(categories)
            discounts = self.create_discounts(products)
            baskets = self.create_baskets(users, products)
      
            mainpage = self.create_mainpage()

        self.stdout.write(self.style.SUCCESS("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!"))

    def clear_test_data(self):
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        User.objects.filter(username__startswith='user').delete()
        
        # –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        models = [
            OrderItem, Order,  # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤
            BasketItem, Basket,
            Discount,
            ArticleCategory, Article,
            Product,
            Category,
            MainPage,
            UserProfile,
        ]
        
        for model in models:
            try:
                model.objects.all().delete()
            except ProtectedError:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –æ–Ω–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—ã—à–µ
                pass

        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–±—Ä–æ—Å –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
        self.reset_sequences()

        self.stdout.write("üóëÔ∏è –°—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")

    def reset_sequences(self):
        """–°–±—Ä–æ—Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º –°–£–ë–î"""
        with connection.cursor() as cursor:
            if connection.vendor == 'sqlite':
                # –î–ª—è SQLite
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                tables = [row[0] for row in cursor.fetchall()]
                for table in tables:
                    if table.startswith('main_'):
                        cursor.execute(f"DELETE FROM sqlite_sequence WHERE name='{table}';")
                        cursor.execute(f"UPDATE sqlite_sequence SET seq=0 WHERE name='{table}';")
            
            elif connection.vendor == 'postgresql':
                # –î–ª—è PostgreSQL
                cursor.execute("""
                    SELECT c.relname
                    FROM pg_class c
                    JOIN pg_namespace n ON c.relnamespace = n.oid
                    WHERE c.relkind = 'S' AND n.nspname = 'public';
                """)
                sequences = [row[0] for row in cursor.fetchall()]
                for seq in sequences:
                    if seq.startswith('main_'):
                        cursor.execute(f"ALTER SEQUENCE {seq} RESTART WITH 1;")
            else:
                self.stdout.write(self.style.WARNING("‚ö†Ô∏è –°–±—Ä–æ—Å –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –°–£–ë–î"))

    def create_users(self):
        users = []
        first_names = ["–ò–≤–∞–Ω", "–ê–ª–µ–∫—Å–µ–π", "–ú–∞—Ä–∏—è", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–î–º–∏—Ç—Ä–∏–π", "–û–ª—å–≥–∞", "–°–µ—Ä–≥–µ–π", "–ê–Ω–Ω–∞", "–ê–Ω–¥—Ä–µ–π", "–ù–∞—Ç–∞–ª—å—è"]
        last_names = ["–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–∏–¥–æ—Ä–æ–≤–∞", "–°–º–∏—Ä–Ω–æ–≤–∞", "–ö—É–∑–Ω–µ—Ü–æ–≤", "–í–∞—Å–∏–ª—å–µ–≤–∞", "–ü–æ–ø–æ–≤", "–ü–∞–≤–ª–æ–≤–∞", "–°–æ–∫–æ–ª–æ–≤", "–ú–∏—Ö–∞–π–ª–æ–≤–∞"]

        for i in range(1, 11):
            username = f'user{i}'
            user = User.objects.create_user(
                username=username,
                email=f'user{i}@example.com',
                password='password123',
                first_name=first_names[i - 1],
                last_name=last_names[i - 1]
            )
            profile = UserProfile.objects.create(
                user=user,
                phone=f'+7 (900) 123-{i:02d}',
                address=f'–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –Ø–±–ª–æ—á–Ω–∞—è, –¥. {i}, –∫–≤. {i}'
            )
            users.append(profile)
            self.stdout.write(f"üë§ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get_full_name()}")

        return users

    def create_categories(self):
        names = [
            "iPhone", "Mac", "iPad", "Apple Watch", "AirPods",
            "Apple TV", "HomePod", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ", "–°–µ—Ä–≤–∏—Å—ã"
        ]
        categories = []
        for name in names:
            category, _ = Category.objects.get_or_create(name=name)
            categories.append(category)
            self.stdout.write(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {name}")
        return categories

    def create_articles(self, categories):
        articles = []
        titles = [
            "–ù–æ–≤—ã–π iPhone 15: —Ä–µ–≤–æ–ª—é—Ü–∏—è –≤ –∫–∞–º–µ—Ä–µ",
            "MacBook Pro —Å M2: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è",
            "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å iPad –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞",
            "Apple Watch Series 9: –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º",
            "AirPods Pro 2: —á–∏—Å—Ç–µ–π—à–∏–π –∑–≤—É–∫",
            "iMac 24‚Ä≥: —Å—Ç–∏–ª—å –∏ –º–æ—â–Ω–æ—Å—Ç—å",
            "Mac Pro: –º–æ–Ω—Å—Ç—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "Apple TV 4K: –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä –¥–æ–º–∞",
            "HomePod mini: —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
            "–õ—É—á—à–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã Apple 2023"
        ]

        for i, title in enumerate(titles):
            article = Article.objects.create(
                title=title,
                teaser=f"{title} - –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ–±–∑–æ—Ä",
                full_text=f"<p>{title} ‚Äî –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.</p>" * 5,
                is_featured=(i == 0)
            )
            ArticleCategory.objects.create(
                article=article,
                category=categories[i % len(categories)],
                weight=random.randint(1, 5)
            )
            articles.append(article)
            self.stdout.write(f"üì∞ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞—Ç—å—è: {title}")
        return articles

    def create_products(self, categories):
        products = []
        data = [
            {"name": "iPhone 15 Pro", "price": 99990, "category": "iPhone"},
            {"name": "MacBook Air M2", "price": 119990, "category": "Mac"},
            {"name": "iPad Pro", "price": 109990, "category": "iPad"},
            {"name": "Apple Watch Ultra 2", "price": 79990, "category": "Apple Watch"},
            {"name": "AirPods Pro 2", "price": 24990, "category": "AirPods"},
            {"name": "Apple TV 4K", "price": 14990, "category": "Apple TV"},
            {"name": "HomePod mini", "price": 9990, "category": "HomePod"},
            {"name": "MagSafe Charger", "price": 4990, "category": "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"},
            {"name": "iCloud+ 2TB", "price": 1490, "category": "–°–µ—Ä–≤–∏—Å—ã"},
            {"name": "Final Cut Pro", "price": 29990, "category": "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ"},
        ]
        for i, item in enumerate(data):
            category = next(c for c in categories if c.name == item["category"])
            product = Product.objects.create(
                title=item["name"],
                description=f"{item['name']} ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä.",
                price=item["price"],
                category=category,
                is_active=(i % 5 != 0)
            )
            products.append(product)
            self.stdout.write(f"üì± –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {product.title}")
        return products

    def create_discounts(self, products):
        discounts = []
        for product in products:
            if product.is_active and random.random() < 0.4:
                discount = Discount.objects.create(
                    product=product,
                    percent=random.randint(5, 30),
                    start_date=timezone.now().date() - timedelta(days=random.randint(0, 5)),
                    end_date=timezone.now().date() + timedelta(days=random.randint(5, 30))
                )
                discounts.append(discount)
                self.stdout.write(f"üéÅ –°–∫–∏–¥–∫–∞: {discount.percent}% –Ω–∞ {product.title}")
        return discounts

    def create_baskets(self, users, products):
        baskets = []
        for profile in users:
            basket = Basket.objects.create(user=profile.user)
            added_products = set()
            for _ in range(random.randint(1, 5)):
                product = random.choice(products)
                if product.id in added_products:
                    item = BasketItem.objects.get(basket=basket, product=product)
                    item.quantity += random.randint(1, 2)
                    item.save()
                else:
                    BasketItem.objects.create(
                        basket=basket,
                        product=product,
                        quantity=random.randint(1, 3)
                    )
                    added_products.add(product.id)
            baskets.append(basket)
            self.stdout.write(f"üõí –ö–æ—Ä–∑–∏–Ω–∞ –¥–ª—è {profile.user.username}")
        return baskets

  

    def create_mainpage(self):
        if not MainPage.objects.exists():
            mainpage = MainPage.objects.create(
                title="Apple Store - –ú–∞–≥–∞–∑–∏–Ω Apple",
                subtitle="–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º"
            )
            self.stdout.write("üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
            return mainpage
        return MainPage.objects.first()